rm(list=ls())
library(foreign)
library(survey)
natsal2 <- read.dta('~/Documents/M_Genitalium/Natsal-2 data/stata11/natsal_2000_for_archive.dta')
natsal2$newnocon <- natsal2$nonocon
table(natsal2$r1datef)
table(cut(natsal2$r1datef, breaks=c(-0.5, 1000))
)
table(cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000))
)
natsal2$r1datef_known <- factor(cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)), levels=c('no','yes','no'))
natsal2$r1datef_known <- factor(cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)), levels=c('n/a','yes','no'))
# make a new variable to try to get at no. new parters without a condom
natsal2$newnocon <- natsal2$nonocon
natsal2$r1datef_known <- factor(
cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)),
levels=c('n/a','yes','no')
)
table(natsal2$nonocon, natsal2$r1datef_known)
table(natsal2$nonocon, natsal2$r1datef_known, useNA='ifany')
# make a new variable to try to get at no. new parters without a condom
natsal2$newnocon <- natsal2$nonocon
natsal2$r1datef_known <- factor(
cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)),
labels=c('n/a','yes','no')
)
table(natsal2$nonocon, natsal2$r1datef_known, useNA='ifany')
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef_known <= 12 )] <-
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef_known <= 12 )] - 1
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef <= 12 )] <-
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef <= 12 )] - 1
table(natsal2$nonocon, natsal2$nonewcon)
table(natsal2$nonocon, natsal2$newnocon)
# make a new variable to try to get at no. new parters without a condom
natsal2$newnocon <- natsal2$nonocon
natsal2$r1datef_known <- factor(
cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)),
labels=c('n/a','yes','no')
)
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef <= 12 )] <-
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef <= 12 )] - 1
table(natsal2$c_result, natsal2$nonocon, natsal2$rsex, natsal2$agrp, useNA='ifany')
# make a new variable to try to get at no. new parters without a condom
natsal2$newnocon <- natsal2$nonocon
natsal2$r1datef_known <- factor(
cut(natsal2$r1datef, breaks=c(-1.5,-0.5, 1000, 10000)),
labels=c('n/a','yes','no')
)
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef > 12 )] <-
natsal2$newnocon[(natsal2$r1datef_known == 'yes') & (natsal2$r1datef > 12 )] - 1
table(natsal2$c_result, natsal2$nonocon, natsal2$rsex, natsal2$agrp, useNA='ifany')
table(natsal2$c_result, natsal2$newnocon, natsal2$rsex, natsal2$agrp, useNA='ifany')
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 10, 10))
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 10, 1))
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 10, 1))
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 10, 1))
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 10, 1))
qbeta(0.5, 1, 1)
qbeta(0.5, 10, 1)
qbeta(0.025, 10, 1)
qbeta(0.975, 10, 1)
qbeta(0.5, 1, 10)
plot(seq(0,1,0.01), dbeta(seq(0,1,0.01), 1, 10))
qbeta(0.025, 1, 10)
qbeta(0.975, 1, 10)
devtools::install_github("mrc-ide/odin", upgrade = FALSE)
lorenz <- odin::odin({
## Derivatives
deriv(y1) <- sigma * (y2 - y1)
deriv(y2) <- R * y1 - y2 - y1 * y3
deriv(y3) <- -b * y3 + y1 * y2
## Initial conditions
initial(y1) <- 10.0
initial(y2) <- 1.0
initial(y3) <- 1.0
## parameters
sigma <- 10.0
R     <- 28.0
b     <-  8.0 / 3.0
config(base) <- "lorenz"
}, path)
lorenz <- odin::odin({
## Derivatives
deriv(y1) <- sigma * (y2 - y1)
deriv(y2) <- R * y1 - y2 - y1 * y3
deriv(y3) <- -b * y3 + y1 * y2
## Initial conditions
initial(y1) <- 10.0
initial(y2) <- 1.0
initial(y3) <- 1.0
## parameters
sigma <- 10.0
R     <- 28.0
b     <-  8.0 / 3.0
config(base) <- "lorenz"
} )
lorenz
y <- lorenz$run(t)
y <- (lorenz())$run(t)
t
t <- seq(0, 10, length.out = 101)
t
y <- (lorenz())$run(t)
y
plot(y, xlab = "Time", ylab = "y", main = "", las = 1)
config(base) <- "model1"
config(base) <- "lorenz"
source('~/Documents/teaching_etc/StochPractical2018/odin_lorenz.R')
model1 <- odin::odin({
## Derivatives
deriv(N_ODE) <- r*N_ODE
## Initial conditions
initial(N_ODE) <- N0
## parameters
r <- 0.5 # Growth rate/week
N0 <- 5 #	Initial number
config(base) <- "model1"
} )
source('~/Documents/teaching_etc/StochPractical2018/model1_single_stochastic_growth.R')
source('~/Documents/teaching_etc/StochPractical2018/model1_single_stochastic_growth.R')
source('~/Documents/teaching_etc/StochPractical2018/model1_single_stochastic_growth.R')
N_ODE <- (model2())$run(t)
source('~/Documents/teaching_etc/StochPractical2018/model2_stochastic_growth.R')
source('~/Documents/teaching_etc/StochPractical2018/model2_stochastic_growth.R')
N_ODE <- (model3())$run(t)
source('~/Documents/teaching_etc/StochPractical2018/model3_stochastic_growth_and_death.R')
devtools::install_github("mrc-ide/odin", upgrade = FALSE)
vignette()
vignette(, package="odin")
source('~/Documents/teaching_etc/StochPractical2018/stochasticity-practical/EXAMPLE2/example2_app.R')
setwd('/Users/Joanna/Documents/teaching_etc/StochPractical2018/stochasticity-practical/EXAMPLE2')
source('~/Documents/teaching_etc/StochPractical2018/stochasticity-practical/EXAMPLE2/example2_app.R')
teaching <- function(path_code, path_docs, default_time,
title = "odin!",
parameters = NULL, extra = NULL) {
model <- odin::odin_(path_code)
code <- shiny::tagList(
shiny::h2("Code"),
shinyAce::aceEditor("code", mode = "r", readOnly = TRUE,
value = odin.ui:::read_text(path_code)))
docs <- shiny::includeMarkdown(path_docs)
ui <- shiny::shinyUI(
shiny::navbarPage(
title,
id = "odin_ui_navbar",
inverse = TRUE,
shiny::tabPanel(
"Code & documentation",
shiny::fluidRow(
shiny::column(6, code),
shiny::column(6, docs))),
shiny::tabPanel(
"Run",
odin.ui:::mod_model_ui("model", NULL)),
shiny::tabPanel(
"Parameters",
odin.ui:::mod_parameter_input("odin_parameter", NULL))))
server <- function(input, output, session) {
shiny::callModule(odin.ui:::mod_model_server, "model",
model, default_time, parameters, extra)
shiny::callModule(odin.ui:::mod_parameter_server, "odin_parameter",
model, default_time, parameters, extra)
}
shiny::shinyApp(ui, server)
}
teaching("example2.R", "example2.md", 100)
source('~/Documents/teaching_etc/StochPractical2018/stochasticity-practical/EXAMPLE2/example2_app.R')
teaching("example2.R", "example2.md", 100)
teaching("example2.R", "example2.md", 14)
teaching("example2.R", "example2.md", 14)
teaching("example2.R", "example2.md", 14)
teaching("example2.R", "example2.md", 14,
extra = function(x) rowmeans(x$N))
teaching("example2.R", "example2.md", 14,
extra = list(mean_N = function(x) rowmeans(x$N)) )
teaching("example2.R", "example2.md", 14,
extra = list(mean_N = function(x) rowMeans(x$N)) )
setwd(../EXAMPLE3)
setwd('../EXAMPLE3')
teaching <- function(path_code, path_docs, default_time,
title = "odin!",
parameters = NULL, extra = NULL) {
model <- odin::odin_(path_code)
code <- shiny::tagList(
shiny::h2("Code"),
shinyAce::aceEditor("code", mode = "r", readOnly = TRUE,
value = odin.ui:::read_text(path_code)))
docs <- shiny::includeMarkdown(path_docs)
ui <- shiny::shinyUI(
shiny::navbarPage(
title,
id = "odin_ui_navbar",
inverse = TRUE,
shiny::tabPanel(
"Code & documentation",
shiny::fluidRow(
shiny::column(6, code),
shiny::column(6, docs))),
shiny::tabPanel(
"Run",
odin.ui:::mod_model_ui("model", NULL)),
shiny::tabPanel(
"Parameters",
odin.ui:::mod_parameter_input("odin_parameter", NULL))))
server <- function(input, output, session) {
shiny::callModule(odin.ui:::mod_model_server, "model",
model, default_time, parameters, extra)
shiny::callModule(odin.ui:::mod_parameter_server, "odin_parameter",
model, default_time, parameters, extra)
}
shiny::shinyApp(ui, server)
}
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N)) )
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N),
fade = function(x) rowMeans(x$N == 0)) )
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N),
fade = function(x) 100*rowMeans(x$N == 0)) )
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N),
fade = function(x) 100*rowMeans(x$N == 0)) )
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N),
percent_fade = function(x) 100*rowMeans(x$N == 0)) )
teaching("example3.R", "example3.md", 28,
extra = list(mean_N = function(x) rowMeans(x$N),
percent_fade = function(x) 100*rowMeans(x$N == 0)) )
setwd('../EXAMPLE4')
teaching <- function(path_code, path_docs, default_time,
title = "odin!",
parameters = NULL, extra = NULL) {
model <- odin::odin_(path_code)
code <- shiny::tagList(
shiny::h2("Code"),
shinyAce::aceEditor("code", mode = "r", readOnly = TRUE,
value = odin.ui:::read_text(path_code)))
docs <- shiny::includeMarkdown(path_docs)
ui <- shiny::shinyUI(
shiny::navbarPage(
title,
id = "odin_ui_navbar",
inverse = TRUE,
shiny::tabPanel(
"Code & documentation",
shiny::fluidRow(
shiny::column(6, code),
shiny::column(6, docs))),
shiny::tabPanel(
"Run",
odin.ui:::mod_model_ui("model", NULL)),
shiny::tabPanel(
"Parameters",
odin.ui:::mod_parameter_input("odin_parameter", NULL))))
server <- function(input, output, session) {
shiny::callModule(odin.ui:::mod_model_server, "model",
model, default_time, parameters, extra)
shiny::callModule(odin.ui:::mod_parameter_server, "odin_parameter",
model, default_time, parameters, extra)
}
shiny::shinyApp(ui, server)
}
teaching("example4.R", "example4.md", 15)#,
teaching("example4.R", "example4.md", 15)#,
teaching("example4.R", "example4.md", 600)#,
teaching("example4.R", "example4.md", 600)#,
teaching("example4.R", "example4.md", 600)#,
teaching("example4.R", "example4.md", 600)#,
teaching("example4.R", "example4.md", 600,
extra = list(mean_N = function(x) rowMeans(x$N),
percent_fade = function(x) 100*rowMeans(x$N == 0)) )
teaching("example4.R", "example4.md", 600,
extra = list(mean_N = function(x) rowMeans(x$N),
percent_fade = function(x) 100*rowMeans(x$N == 0)) )
teaching("example4.R", "example4.md", 600,
extra = list(mean_N = function(x) rowMeans(x$N) ) )
teaching("example4.R", "example4.md", 600,
extra = list(mean_I = function(x) rowMeans(x$I) ) )
teaching("example4.R", "example4.md", 600,
extra = list(mean_I = function(x) rowMeans(x$I) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
setwd('../EXAMPLE5')
teaching <- function(path_code, path_docs, default_time,
title = "odin!",
parameters = NULL, extra = NULL) {
model <- odin::odin_(path_code)
code <- shiny::tagList(
shiny::h2("Code"),
shinyAce::aceEditor("code", mode = "r", readOnly = TRUE,
value = odin.ui:::read_text(path_code)))
docs <- shiny::includeMarkdown(path_docs)
ui <- shiny::shinyUI(
shiny::navbarPage(
title,
id = "odin_ui_navbar",
inverse = TRUE,
shiny::tabPanel(
"Code & documentation",
shiny::fluidRow(
shiny::column(6, code),
shiny::column(6, docs))),
shiny::tabPanel(
"Run",
odin.ui:::mod_model_ui("model", NULL)),
shiny::tabPanel(
"Parameters",
odin.ui:::mod_parameter_input("odin_parameter", NULL))))
server <- function(input, output, session) {
shiny::callModule(odin.ui:::mod_model_server, "model",
model, default_time, parameters, extra)
shiny::callModule(odin.ui:::mod_parameter_server, "odin_parameter",
model, default_time, parameters, extra)
}
shiny::shinyApp(ui, server)
}
teaching("example5.R", "example5.md", 300)#,
teaching("example5.R", "example5.md", 300)#,
teaching("example5.R", "example5.md", 300)#,
teaching("example5.R", "example5.md", 300)#,
getwd()
teaching("example5.R", "example5.md", 300)#,
teaching("example5.R", "example5.md", 300)#,
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ))
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ))
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
setwd('../EXAMPLE1')
teaching <- function(path_code, path_docs, default_time,
title = "odin!",
parameters = NULL, extra = NULL) {
model <- odin::odin_(path_code)
code <- shiny::tagList(
shiny::h2("Code"),
shinyAce::aceEditor("code", mode = "r", readOnly = TRUE,
value = odin.ui:::read_text(path_code)))
docs <- shiny::includeMarkdown(path_docs)
ui <- shiny::shinyUI(
shiny::navbarPage(
title,
id = "odin_ui_navbar",
inverse = TRUE,
shiny::tabPanel(
"Code & documentation",
shiny::fluidRow(
shiny::column(6, code),
shiny::column(6, docs))),
shiny::tabPanel(
"Run",
odin.ui:::mod_model_ui("model", NULL)),
shiny::tabPanel(
"Parameters",
odin.ui:::mod_parameter_input("odin_parameter", NULL))))
server <- function(input, output, session) {
shiny::callModule(odin.ui:::mod_model_server, "model",
model, default_time, parameters, extra)
shiny::callModule(odin.ui:::mod_parameter_server, "odin_parameter",
model, default_time, parameters, extra)
}
shiny::shinyApp(ui, server)
}
teaching("example1.R", "example1.md", 100)
setwd('../EXAMPLE2')
teaching("example2.R", "example2.md", 14,
extra = list(mean_N = function(x) rowMeans(x$N)) )
setwd('../EXAMPLE3')
teaching("example3.R", "example3.md", 15,
extra = list(mean_N = function(x) rowMeans(x$N),
percent_fade = function(x) 100*rowMeans(x$N == 0)) )
setwd('../EXAMPLE4')
teaching("example4.R", "example4.md", 600,
extra = list(mean_I = function(x) rowMeans(x$I) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
setwd('../EXAMPLE5')
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
teaching("example5.R", "example5.md", 300,
extra = list(mean_S = function(x) rowMeans(x$S) ,
mean_I = function(x) rowMeans(x$I) ,
mean_R = function(x) rowMeans(x$R) ,
percent_fade = function(x) 100*rowMeans(x$I == 0)) )
devtools::install_github("mrc-ide/odin.ui@prototype")
